Bootstrap: docker
From: python:3.11-slim

%labels
    Maintainer Sergio Estrada
    Version 1.0

%post
    echo "Setting up container..."
    ## BEGIN INITIALIZAITION REGION ##
    # Run update
    apt-get update
    

    ## BEGIN OBDC DRIVER INSTALLATION REGION ##
    apt-get install -y curl gnupg unixodbc unixodbc-dev

    # Add Microsoft's repository for ODBC Driver 18
    curl https://packages.microsoft.com/keys/microsoft.asc | tee /etc/apt/trusted.gpg.d/microsoft.asc
    curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | tee /etc/apt/sources.list.d/mssql-release.list

    # Install Microsoft ODBC Driver 18 for SQL Server
    apt-get update
    ACCEPT_EULA=Y apt-get install -y msodbcsql18

    # Install mssql-tools18 and accept the EULA during installation
    ACCEPT_EULA=Y apt-get install -y mssql-tools18

    ## END OBDC DRIVER INSTALLATION REGION ##

    ## BEGIN FRONTEND DELIVERY REGION ##
    # Install Node.js & npm
    apt-get install -y nodejs npm
    ## END FRONTEND DELIVERY REGION ##

    ## BEGIN CLOSING BUILD REGION ##
    # Clean up unnecessary files
    apt-get clean
    rm -rf /var/lib/apt/lists/*

    echo "Finished building container."
    ## END CLOSING BUILD REGION ##

%environment
    export PYTHONUNBUFFERED=1
    export APP_HOME=/
    export PATH=/opt/mssql-tools18/bin:$PATH

    
%startscript
    # Log file in the current working directory
    LOG_FILE="container_startup.log"
    
    # Redirect all output to the log file
    {
        echo "$(date): Starting container services..."
        
        # Install frontend dependencies
        if [ -f frontend/package.json ]; then
            cd frontend
            npm install
        else
            echo "WARNING: package.json not found in frontend directory"
        fi

        # Build Frontend
        cd frontend
        npm run build 
        echo "Frontend build successful"
        cd ../backend

        # Install Python dependencies
        if [ -f requirements.txt ]; then
            pip install --no-cache-dir -r requirements.txt
        else
            echo "WARNING: requirements.txt not found in backend directory"
        fi

        # Start FastAPI backend
        echo "Starting backend..."
        python -m uvicorn main:app --host 0.0.0.0 --port 32776 --reload

        wait  # Keeps the processes alive
    } > "$LOG_FILE" 2>&1